@startuml
title Web User Use Cases
left to right direction
actor :Web User: << Human / Bot >> as WebUser

rectangle Browser{
    rectangle HTTP {
        usecase (GET Resource) as HttpGet
        usecase (POST Resource) as HttpPost
        usecase (PUT Resource) as HttpPut
        usecase (DELETE Resource) as HttpDelete
    }

    rectangle HTML {
        usecase (Manipulates DOM) as ManipDom
    }
}

WebUser =d=> ManipDom : Invoke

WebUser =r=> HttpGet : Invoke
WebUser =r=> HttpPost : Invoke
WebUser =r=> HttpPut : Invoke
WebUser =r=> HttpDelete : Invoke
@enduml
@startuml
title Godzilla Use Cases
'https://plantuml.com/use-case-diagram
left to right direction

skinparam actorStyle awesome

actor Godzilla << Server >>
note bottom of Godzilla
    Godzilla is Hosted in IIS or
    another web server.
end note

rectangle Browser{
    rectangle HTTP {
        usecase (GET Resource) as HttpGet
        usecase (POST Resource) as HttpPost
        usecase (PUT Resource) as HttpPut
        usecase (DELETE Resource) as HttpDelete
    }

    rectangle WebSocket {
        usecase (Read Resource) as ReadRes
        usecase (Save Resource) as SaveRes
        usecase (Remove Resource) as RemoveRes
        usecase (Send Notification) << Event >> as Notification
    }
}

Godzilla <=l= ReadRes
Godzilla <=l= SaveRes
Godzilla <=l= RemoveRes

Godzilla =d=> Notification

Godzilla <=u= HttpGet
Godzilla <=u= HttpPost
Godzilla <=u= HttpPut
Godzilla <=u= HttpDelete
@enduml
@startuml
title Mothra Uses Cases
top to bottom direction
skinparam actorStyle hollow

rectangle Browser {
    rectangle HTML {
        usecase (Load DOM) as LoadDom
        usecase (Manipulates DOM) as ManipDom
    }

    rectangle WebSocket {
        usecase (Read Resource) as ReadRes
        usecase (Save Resource) as SaveRes
        usecase (Remove Resource) as RemoveRes
        usecase (Send Notification) << Event >> as Notification
    }

    usecase (Trigger Event) as TriggerEvent
    usecase (Notifies Subscribers) << Event >> as Notify
    usecase (IPC)

    TriggerEvent <|.d. Notify : Inherit
    TriggerEvent .u.|> ManipDom : Inherit
    TriggerEvent .u.|> LoadDom : Inherit

    actor Kong << WASM >> as Kong
    actor Mothra << JavaScript >> as Mothra

    Notify =d=> Mothra 

    Mothra =u=> ManipDom : Invoke
    Mothra =u=> LoadDom : Invoke

    Mothra =d=> ReadRes : Invoke
    Mothra =d=> SaveRes : Invoke
    Mothra =d=> RemoveRes : Invoke

    Mothra <=d= Notification

    Kong <=r= IPC : Invoke
    IPC <=r= Mothra : Invoke
}
@enduml
@startuml
title Kong Use Cases
top to bottom direction
skinparam actorStyle hollow

rectangle Browser {
    rectangle HTML {
        usecase (Load DOM) as LoadDom
        usecase (Manipulates DOM) as ManipDom
    }

    rectangle WebSocket {
        usecase (Read Resource) as ReadRes
        usecase (Save Resource) as SaveRes
        usecase (Remove Resource) as RemoveRes
        usecase (Send Notification) << Event >> as Notification
    }

    usecase (Trigger Event) as TriggerEvent
    usecase (Notifies Subscribers) << Event >> as Notify
    usecase (IPC)

    TriggerEvent <|.d. Notify : Inherit
    TriggerEvent .u.|> ManipDom : Inherit
    TriggerEvent .u.|> LoadDom : Inherit

    actor Kong << WASM >> as Kong
    actor Mothra << JavaScript >> as Mothra

    Notify ==> Kong

    Kong =d=> ReadRes : Invoke
    Kong =d=> SaveRes : Invoke
    Kong =d=> RemoveRes : Invoke

    Kong <=d= Notification

    Kong =l=> IPC : Invoke
    IPC =r=> Mothra : Invoke

    Mothra =d=> ManipDom : Invoke
    Mothra =d=> LoadDom : Invoke
}
@enduml
